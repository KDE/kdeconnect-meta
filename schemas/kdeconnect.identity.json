{
    "$schema": "http://json-schema.org/schema#",
    "title": "kdeconnect.identity",
    "description": "The KDE Connect identity packet is used to identify devices and their capabilities.\n\nEach networking module may define additional fields necessary for clients to connect. For example, in the LAN protocol the identity packet is broadcast over UDP with a `tcpPort` field.",
    "examples": [
        {
            "id": 0,
            "type": "kdeconnect.identity",
            "body": {
                "deviceId": "740bd4b9b4184ee497d6caf1da8151be",
                "deviceName": "FOSS Phone",
                "deviceType": "phone",
                "incomingCapabilities": [
                    "kdeconnect.mock.echo",
                    "kdeconnect.mock.transfer"
                ],
                "outgoingCapabilities": [
                    "kdeconnect.mock.echo",
                    "kdeconnect.mock.transfer"
                ],
                "protocolVersion": 8
            }
        }
    ],
    "type": "object",
    "required": [
        "id",
        "type",
        "body"
    ],
    "properties": {
        "id": {
            "type": "number"
        },
        "type": {
            "type": "string",
            "enum": ["kdeconnect.identity"]
        },
        "body": {
            "type": "object",
            "required": [
                "deviceId",
                "deviceName",
                "deviceType",
                "incomingCapabilities",
                "outgoingCapabilities",
                "protocolVersion"
            ],
            "properties": {
                "deviceId": {
                    "description": "A unique ID for the device. Device IDs must be generated to be between 32 and 38 alphanumerical characters, and will be also set as the Common Name in the device TLS certificate. For backwards compatibility, however, implementations must accept (but not generate new) device IDs that also include hyphens (`-`) and/or underscores (`_`). A way to generate a valid device ID is getting a random UUIDv4 string and removing the hyphens (`-`), such as `740bd4b9b4184ee497d6caf1da8151be`.",
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9_-]{32,38}$"
                },
                "deviceName": {
                    "description": "A human-readable label for the device. Must be 1-32 characters in length. Shouldn't contain any of the following punctuation marks `\"',;:.!?()[]<>` If a name is received with invalid characters, they should be sanitized before being used. When displayed to the user for pairing or other privileged interactions, it should always be displayed within quotes.",
                    "type": "string",
                    "pattern": "^[^\"',;:.!?()\\[\\]<>]{1,32}$"
                },
                "deviceType": {
                    "description": "A device type string. Since the `incomingCapabilities` and `outgoingCapabilities` fields describe the functionality of a device, the `deviceType` field is typically only used to select an icon.",
                    "type": "string",
                    "enum": [
                        "desktop",
                        "laptop",
                        "phone",
                        "tablet",
                        "tv"
                    ]
                },
                "incomingCapabilities": {
                    "description": "A list of packet types the device can consume. Note that this is only an indication a device can consume a packet type, not that it will.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "outgoingCapabilities": {
                    "description": "A list of packet types the device can provide. Note that this is only an indication a device can provide a packet type, not that it will.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "protocolVersion": {
                    "description": "The latest protocol version implemented by the device. The current version of the protocol described in this document is `8`.",
                    "type": "number",
                    "enum": [7, 8]
                }
            }
        }
    }
}
